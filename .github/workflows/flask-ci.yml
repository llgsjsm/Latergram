name: Flask CI for Dev Branches

# On push or pull request to branches starting with `dev-release-*`, this workflow will run. Requires changes to the `app-server` directory.
on:
  push:
    branches:
      - dev-release-*
    paths:
      - 'app-server/**'
  pull_request:
    branches:
      - dev-release-*

# Workflow ->
# Flask + NGINX + MySQL only
# Note: Flask runtime environment, and not exposed to the internet
# Only internal checks if required.

jobs:
  web-stack:
    runs-on: ubuntu-latest
    name: Web Stack CI for Flask
    environment: development

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Set up Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Generate Flask .env files
      run: |
        mkdir -p app-server
        cat <<EOF > app-server/.env
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_HOST=${{ secrets.DB_HOST }}
        DB_PORT=${{ secrets.DB_PORT }}
        DB_NAME=${{ secrets.DB_NAME }}
        FILE_LOCATION=${{ secrets.FILE_LOCATION }} 
        BUCKET=${{ secrets.BUCKET }}
        IS_TESTING=True
        PLAYWRIGHT=True
        EOF

    - name: Create Firebase Key
      run: |
        echo "${{ secrets.FIREBASE_KEY }}" | base64 --decode > ${{ secrets.FILE_LOCATION }}
        cat ${{ secrets.FILE_LOCATION }}
        ls -l app-server/

    - name: Generate .env files
      run: |
        cat <<EOF > .env
        MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
        MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
        MYSQL_USER=${{ secrets.MYSQL_USER }}
        MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
        EOF

    - name: Build Flask 
      run: docker-compose -f docker-compose.ci.yml up -d --build flask nginx mysqldb

    - name: Wait for Web Stack to be healthy
      run: |
        docker ps | grep flask
        docker ps | grep nginx
        docker ps | grep mysqldb

    - name: Run Flask Test
      run: |
        echo "Waiting for Flask + NGINX to be up..."
        for i in {1..30}; do
          if curl -f http://localhost:80/ > /dev/null 2>&1; then
            echo "Flask is up"
            exit 0
          fi
          echo "Waiting... ($i)"
          sleep 2
        done
        echo "Flask did not start in time"
        exit 1

    - name: Run SQL Test
      run: |
        echo "Waiting for MySQL to be ready..."
        for i in {1..30}; do
          if mysql -h "${{ secrets.DB_HOST }}" \
                  -P "${{ secrets.DB_PORT }}" \
                  -u "${{ secrets.MYSQL_USER }}" \
                  -p"${{ secrets.MYSQL_PASSWORD }}" \
                  -e "SELECT 1;" > /dev/null 2>&1; then
            echo "MySQL is ready!"
            exit 0
          fi
          echo "Waiting... ($i)"
          sleep 2
        done
        echo "MySQL did not become ready in time."
        exit 1

    - name: Run Flask Unit Tests
      run: |
        echo "Running Flask unit tests..."
        docker exec flask python -m unittest discover tests
    
    - name: Run Playwright Tests
      run: |
        echo "Running Playwright tests..."
        docker exec flask pip install pytest playwright
        docker exec flask playwright install-deps
        docker exec flask python -m playwright install
        docker exec flask pytest ui_tests/test_playwright_ui.py

    - name: Teardown
      if: always()
      run: docker-compose -f docker-compose.ci.yml down -v

    - name: Teardown Flask .env file
      if: always()
      run: rm -f app-server/.env
