name: Flask CI for Dev Branches

on:
  push:
    branches:
      - dev-release-*
    paths:
      - 'app-server/**'
  pull_request:
    branches:
      - dev-release-*

jobs:
  # Setup common environment and dependencies
  setup:
    runs-on: ubuntu-latest
    name: Setup Environment for Flask CI
    environment: development
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Generate Flask .env files
        run: |
          mkdir -p app-server
          cat <<EOF > app-server/.env
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          FILE_LOCATION=${{ secrets.FILE_LOCATION }} 
          BUCKET=${{ secrets.BUCKET }}
          IS_TESTING=true
          PLAYWRIGHT=true
          EOF

      - name: Create Firebase Key
        run: |
          echo "${{ secrets.FIREBASE_KEY }}" | base64 --decode > app-server/${{ secrets.FILE_LOCATION }}

      - name: Generate .env files for MySQL
        run: |
          cat <<EOF > .env
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          EOF
          
      # Cache Docker images and Flask dependencies
      - name: Cache Docker images
        uses: actions/cache@v3
        with:
          path: ~/.docker
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

  # Web Stack Build and Test
  web-stack:
    runs-on: ubuntu-latest
    needs: setup
    name: Web Stack CI for Flask
    environment: development
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Build Flask + NGINX + MySQL
        run: docker-compose -f docker-compose.ci.yml up -d --build flask nginx mysqldb

      - name: Wait for Web Stack to be healthy
        run: |
          docker ps | grep flask
          docker ps | grep nginx
          docker ps | grep mysqldb

      - name: Run Flask Test
        run: |
          echo "Waiting for Flask + NGINX to be up..."
          for i in {1..30}; do
            if curl -f http://localhost:80/ > /dev/null 2>&1; then
              echo "Flask is up"
              exit 0
            fi
            echo "Waiting... ($i)"
            sleep 2
          done
          echo "Flask did not start in time"
          exit 1

      - name: Run SQL Test
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysql -h "${{ secrets.DB_HOST }}" \
                    -P "${{ secrets.DB_PORT }}" \
                    -u "${{ secrets.MYSQL_USER }}" \
                    -p"${{ secrets.MYSQL_PASSWORD }}" \
                    -e "SELECT 1;" > /dev/null 2>&1; then
              echo "MySQL is ready!"
              exit 0
            fi
            echo "Waiting... ($i)"
            sleep 2
          done
          echo "MySQL did not become ready in time."
          exit 1

  # Unit Tests for Flask
  unit-tests:
    runs-on: ubuntu-latest
    needs: web-stack
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Build Flask Container
        run: docker-compose -f docker-compose.ci.yml up -d --build flask

      - name: Run Flask Unit Tests
        run: |
          echo "Running Flask unit tests..."
          docker exec flask python -m unittest discover tests

  # UI Tests for Playwright
  ui-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Build Flask Container
        run: docker-compose -f docker-compose.ci.yml up -d --build flask

      - name: Run Playwright Tests
        run: |
          echo "Running Playwright tests..."
          docker exec flask pip install pytest playwright
          docker exec flask playwright install-deps
          docker exec flask python -m playwright install
          docker exec flask pytest ui_tests/test_playwright_ui.py

      - name: Teardown
        if: always()
        run: docker-compose -f docker-compose.ci.yml down -v

      - name: Teardown Flask .env file
        if: always()
        run: rm -f app-server/.env
